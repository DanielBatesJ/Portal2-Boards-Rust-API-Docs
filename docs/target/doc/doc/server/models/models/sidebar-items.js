initSidebarItems({"struct":[["Admin","Empty struct to allow for implementation blocks for admin specific db interactions"],["AdminLevel","Wrapper around an optional i32, for use in [actix_web::web::Query]"],["BannedTimeDetails","Details on a user’s banned/unverified runs for the admin display page"],["CalcValues","Values that we return after checking if a score is valid to be added to the database."],["Categories","One-to-one struct for Category data."],["Changelog","One-to-one struct for changelog data."],["ChangelogInsert","All changelog data except for the ID, for table insertion."],["ChangelogPage","Indlues additional information from joins that includes details like map name, username and profile image."],["ChangelogQueryParams","All the accepted query parameters for the changelog page."],["ChapterQueryParams","Querying for Chapters"],["Chapters","One-to-one struct for chapter data."],["CoopBanned","Banned times for Coop"],["CoopBundled","One-to-one struct for coop_bundled data."],["CoopBundledInsert","Insert struct for creating a new `CoopBundled`"],["CoopMap","The minimal data we want for Coop map pages to lower bandwitch usage."],["CoopPreview","The data for the preview page for all Coop Maps"],["CoopPreviews","Wrapper for prevciewing the top 7 for all Coop maps."],["CoopRanked","Wrapper for the coop map data and the rank/score."],["DemoInsert","Insert struct for `Demos`, excludes `id`"],["DemoOptions","Allows us to accept an optional demo_id or cl_id as a set of query parameters for demo endpoints."],["Demos","One-to-one struct for demo data."],["GameID","Query wrapper for game_id"],["Games","One-to-one struct for game data."],["HistoryParams","Wrapper to allow queries to include `map_id`, `profile_number` and optional `cat_id`."],["MapScoreDate","Map ID & Name, score and timestamp for a given score."],["Maps","One-to-one struct for map data."],["OptCatID","Generic wrapper around an Option i32 for [actix_web::web::Query]"],["Points","Point information for a given player."],["PointsProfileWrapper","Wrapper for a profile page, includes the ID associated with the points and the poits themselves."],["PointsReadWrapper","Wrapper for reading points from a file."],["PointsReceiveWrapper","Wrapper for us receiving points from the backend"],["PointsWriteWrapper","Wrapper for writing points, uses a ref to the points to avoid unnecessary allocation, cannot be used to Deserialize."],["ProfileData","Oldest and newest `MapScoreDate` for a profile."],["ProfilePage","Profile Page that includes a Vec of PointsProfileWrappers, ProfileData and a hasmap of map_ids to current ranks."],["ScoreLookup","Used to lookup information on a specific score."],["ScoreParams","Wrapper to send a profile number as a search result"],["Socials","Social media accounts from `Users`"],["SpBanned","Banned times for SP"],["SpMap","The minimal data we want for SP map pages to lower bandwidth usage."],["SpPbHistory","Wrapper for a player’s SP PB history."],["SpPreview","The data for the preview page for all SP Maps"],["SpPreviews","Wrapper for multiple SpPreviews, prevents repeat data (multiple map_name and map_id copies)"],["SpRanked","Wrapper for the sp map data and the rank/score."],["SubmissionChangelog","Fields for a submission to the changelog"],["Users","One-to-one struct for user data."],["UsersDisplay","Wraps `profile_number`, `user_name` and `avatar` for displaying a user."],["UsersPage","Includes only a `user_name` and `avatar`, does not include the `profile_number`"]]});